# -*- coding: utf-8 -*-
"""movie_rating_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z4Y9VIzN4u1aoVCunPj-bhmO7OJhwfKI
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder

# Load dataset
df = pd.read_csv("IMDb Movies India.csv", encoding='latin1')

# Drop rows without rating (target variable)
df = df.dropna(subset=["Rating"])

# Clean Year (remove parentheses and non-numeric)
df["Year"] = df["Year"].str.extract(r'(\d{4})').astype(float)

# Clean Duration
df["Duration"] = df["Duration"].str.replace(" min", "").astype(float)

# Fill missing numeric values
df["Votes"] = pd.to_numeric(df["Votes"], errors='coerce')
df["Votes"] = df["Votes"].fillna(0)
df["Duration"] = df["Duration"].fillna(df["Duration"].median())
df["Year"] = df["Year"].fillna(df["Year"].median())

# Combine actors into one column (optional simplification)
df["Actors"] = df["Actor 1"].fillna('') + "," + df["Actor 2"].fillna('') + "," + df["Actor 3"].fillna('')

# Select features
features = ["Genre", "Director", "Actors", "Year", "Duration", "Votes"]
X = df[features]
y = df["Rating"]

# One-hot encode categorical features
encoder = OneHotEncoder(handle_unknown='ignore')
X_encoded = encoder.fit_transform(X[["Genre", "Director", "Actors"]]).toarray()

# Combine with numeric features
X_numeric = X[["Year", "Duration", "Votes"]].values
X_final = np.hstack((X_encoded, X_numeric))

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_final, y, test_size=0.2, random_state=42)

# Model
model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ²: {r2:.2f}")